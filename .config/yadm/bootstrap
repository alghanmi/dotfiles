#!/bin/bash
cd "$HOME"

system_type=$(uname -s)

# Static Environment Configuration
#   I found that some evaluations take time and slow down the loading of zsh, therefore,
#   instead of evaluating in ~/.zshrc, I will set the values in a file that is regenerated
#   during every run of the bootstrap process.
host_env_static="$HOME/.shell.d/00-env-host-static.sh"
rm -f "$host_env_static"

# Create local bin directory
mkdir -p $HOME/.local/bin

# Bootstrap MacOS
if [ "$system_type" = "Darwin" ]; then
  # Install homebrew if it's missing
  if ! command -v brew >/dev/null 2>&1; then
    echo "Installing homebrew"
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi

  # Install XCode Command Line Tools (CLT)
  echo "XCode Command Line Tools (CLT)"
  xcode-select --install &> /dev/null
  
  # Ensure your MacOS is up to date
  echo "Updating MacOS"
  softwareupdate --all --install --force

  # Install/update brew bundle
  if [ -f "$HOME/.Brewfile" ]; then
    echo "Updating homebrew bundle"
    brew update
    brew doctor
    brew upgrade  # Ensure all packages are upgraded
    brew cleanup --prune=14
    brew bundle --file="$HOME/.Brewfile"
  fi
  
  # Enable and use the brew-managed ZSH
  if ! grep -Fxq "$(brew --prefix)/bin/zsh" /etc/shells; then
    sudo cp /etc/shells /etc/shells.default
    echo "$(brew --prefix)/bin/zsh" | sudo tee -a /etc/shells
  fi

  if [ "$SHELL" != "$(brew --prefix)/bin/zsh" ]; then
    chsh -s $(brew --prefix)/bin/zsh
  fi

  # Setup iTerm2
  if [ -d "$HOME/.iterm2" ]; then
    echo "Setting iTerm preference folder"
    defaults write com.googlecode.iterm2.plist PrefsCustomFolder -string "$HOME/.config/iterm2"
    defaults write com.googlecode.iterm2.plist LoadPrefsFromCustomFolder -bool true
    defaults write com.googlecode.iterm2 NoSyncNeverRemindPrefsChangesLostForFile -bool true
    defaults write com.googlecode.iterm2 NoSyncNeverRemindPrefsChangesLostForFile_selection -bool true
  fi

  # Static Environment Configuration - FZF
  export FZF_HOME=$(brew --prefix fzf)
  $FZF_HOME/install --no-bash --no-fish --completion --key-bindings --no-update-rc
  echo "# FZF Configuration" >> "$host_env_static"
  echo "export FZF_HOME=$FZF_HOME" >> "$host_env_static"
  echo "[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh" >> "$host_env_static"
  echo "" >> "$host_env_static"

  # Static Environment Configuration - python
  echo "# Make python aliases point to python3 because 2 is no longer installed" >> "$host_env_static"
  echo "export PATH=$(brew --prefix python)/libexec/bin:\$PATH" >> "$host_env_static"
  export PATH=$(brew --prefix python)/libexec/bin:$PATH
  echo "" >> "$host_env_static"

  # Static Environment Configuration - curl
  export _homebrew_managed=(curl sqlite)
  for pkg in ${_homebrew_managed[@]}; do
    echo "# ${pkg} - adding homebrew-managed package to the begning of path" >> "$host_env_static"
    echo "export PATH=$(brew --prefix ${pkg})/bin:\$PATH" >> "$host_env_static"
    export PATH=$(brew --prefix ${pkg})/bin:$PATH
    echo "" >> "$host_env_static"
  done

  # Static Environment Configuration - dircolors
  export GNU_DIRCOLORS_PATH="$(brew --prefix)/bin/gdircolors"
  echo "# dircolors" >> "$host_env_static"
  echo "$(${GNU_DIRCOLORS_PATH} -b ${HOME}/.dircolors)" >> "$host_env_static"
  echo "" >> "$host_env_static"

  # Static Environment Configuration - grc
  echo "# grc - generic colouriser for everything" >> "$host_env_static"
  echo "source $(brew --prefix)/etc/grc.zsh" >> "$host_env_static"
  echo "" >> "$host_env_static"

  # Install python packages
  if [ -f "$HOME/.pip-packages" ]; then
    echo "Upgrade setuptools"
    python3 -m pip install --upgrade setuptools
    echo "Upgrade pip"
    python3 -m pip install --upgrade pip
    echo "Install python packages"
    pip3 install --upgrade --requirement "$HOME/.pip-packages"
  fi

  # Set default applications for known extensions.
  # Application names can be found using the mdls command, e.g.
  # mdls -name kMDItemCFBundleIdentifier -r  /Applications/Visual\ Studio\ Code.app
  duti -s com.microsoft.VSCode yaml all
  duti -s com.microsoft.VSCode yml all
  duti -s com.microsoft.VSCode json all

  # Ensure proper permissions for ZSH shared directories
  # Use `compaudit` to verify
  chmod 755 /usr/local/share/zsh
  chmod 755 /usr/local/share/zsh/site-functions
fi


# Static Environment Configuration - GOROOT
if command -v go >/dev/null 2>&1; then
  echo "# Setup golang's GOROOT environment variable" >> "$host_env_static"
  echo "export GOROOT=$(go env GOROOT)" >> "$host_env_static"

  echo "" >> "$host_env_static"
fi

# Create SSH configuration directory
mkdir -p  "$HOME/.ssh" "$HOME/.ssh/config.d" "$HOME/.ssh/sockets"
chmod 700 "$HOME/.ssh" "$HOME/.ssh/config.d" "$HOME/.ssh/sockets"

# Upgrade antigen plugins if needed
echo "Upgrading Antigen plugins"
if [ -f "$HOME/.antigen/antigen.log" ]; then
  mv "$HOME/.antigen/antigen.log" "$HOME/.antigen/antigen.$(date +'%Y%m%d-%H%M%S').log"
fi
zsh -c '. $HOME/.zshrc && antigen update'

echo "Antigen Reset"
zsh -c '. $HOME/.zshrc && antigen reset'

# Bootstrap vim
if command -v vim >/dev/null 2>&1; then
  # Download the latest vim-plug
  curl --fail --location --create-dirs --silent --output $HOME/.vim/autoload/plug.vim \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

  # Install all plugins
  echo "Bootstraping Vim"
  vim '+PlugUpdate' '+PlugClean!' '+PlugUpdate' '+qall'
fi

# Bootstrap tmux
if command -v tmux >/dev/null 2>&1; then
  echo "Bootstrapping tmux"
  if [ ! -d "$HOME/.tmux/plugins/tpm" ]; then
    # installing tmux-plugin-manager and plugins
    mkdir "$HOME/.tmux/plugins"
    git clone https://github.com/tmux-plugins/tpm "$HOME/.tmux/plugins/tpm"
    "$HOME"/.tmux/plugins/tpm/bin/install_plugins
  else
    # updating tpm and plugins
    cd "$HOME/.tmux/plugins/tpm"
    git pull -p
    cd "$HOME"
    "$HOME"/.tmux/plugins/tpm/bin/update_plugins all
  fi
fi

# Bootstrap Go
if command -v go >/dev/null 2>&1; then
  echo "Bootstrapping Go"
  if [ ! -d "$HOME/go" ]; then
    mkdir $HOME/go
    mkdir -p $HOME/go/bin $HOME/go/pkg $HOME/go/src
  fi
fi

# Vagrant Plugins
if command -v vagrant >/dev/null 2>&1; then
  echo "Vagrant plugins"
  if [ -n "$(vagrant plugin list | grep vagrant-vbguest)" ]; then
  	vagrant plugin update
  else
  	vagrant plugin install vagrant-vbguest
  fi
fi

# Bootstrap Terraform
if command -v terraform >/dev/null 2>&1; then
  echo "Bootstrapping Terraform"
  if [ ! -d "$HOME/.terraform.d" ]; then
    mkdir "$HOME/.terraform.d"
    chmod 755 "$HOME/.terraform.d"
  fi
  if [ ! -d "$HOME/.terraform.d/plugins" ]; then
    mkdir "$HOME/.terraform.d/plugins"
    chmod 755 "$HOME/.terraform.d/plugins"
  fi
  if [ ! -d "$HOME/.terraform.d/plugin-cache" ]; then
    mkdir "$HOME/.terraform.d/plugin-cache"
    chmod 755 "$HOME/.terraform.d/plugin-cache"
  fi
fi

# Install Visual Studio Code Plugins
if [ -f "$HOME/.vscode-extensions" ]; then
  if command -v code >/dev/null 2>&1; then
    echo "Installing visual studio code plugins"
    cat "$HOME/.vscode-extensions" | xargs -n 1 code --force --install-extension
  fi
fi

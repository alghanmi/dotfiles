#!/bin/bash
cd "$HOME"

system_type=$(uname -s)

# Static Environment Configuration
#   I found that some evaluations take time and slow down the loading of zsh, therefore,
#   instead of evaluating in ~/.zshrc, I will do that during the bootstrap process.
host_env_static="$HOME/.shell.d/00-env-host-static.sh"
rm -f "$host_env_static"

# Bootstrap MacOS
if [ "$system_type" = "Darwin" ]; then
  # Install homebrew if it's missing
  if ! command -v brew >/dev/null 2>&1; then
    echo "Installing homebrew"
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi

  # Install/update brew bundle
  if [ -f "$HOME/.Brewfile" ]; then
    echo "Updating homebrew bundle"
    brew update
    brew doctor && brew bundle --file="$HOME/.Brewfile"
  fi

  # Install python packages
  if [ -f "$HOME/.pip-packages" ]; then
    echo "Install python packages"
    pip install --upgrade --requirement "$HOME/.pip-packages"
  fi

  # Setup iTerm2
  if [ -d "$HOME/.iterm2" ]; then
    echo "Setting iTerm preference folder"
    defaults write com.googlecode.iterm2.plist PrefsCustomFolder -string "$HOME/.iterm2"
    defaults write com.googlecode.iterm2.plist LoadPrefsFromCustomFolder -bool true
  fi

  # Static Environment Configuration - FZF
  export FZF_HOME=$(brew --prefix fzf)
  $FZF_HOME/install --no-bash --no-fish --completion --key-bindings --no-update-rc
  echo "# FZF Configuration" >> "$host_env_static"
  echo "export FZF_HOME=$FZF_HOME" >> "$host_env_static"
  echo "[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh" >> "$host_env_static"

  echo "" >> "$host_env_static"
  echo "" >> "$host_env_static"

  # Static Environment Configuration - dircolors
  export GNU_DIRCOLORS_PATH="$(brew --prefix)/bin/gdircolors"
  echo "# dircolors" >> "$host_env_static"
  echo "$(${GNU_DIRCOLORS_PATH} -b ${HOME}/.dircolors)" >> "$host_env_static"

  echo "" >> "$host_env_static"
  echo "" >> "$host_env_static"

  # Static Environment Configuration - grc
  echo "# grc - generic colouriser for everything" >> "$host_env_static"
  echo "source $(brew --prefix)/etc/grc.zsh" >> "$host_env_static"

  echo "" >> "$host_env_static"
  echo "" >> "$host_env_static"
fi


# Static Environment Configuration - GOROOT
echo "export GOROOT=$(go env GOROOT)" >> "$host_env_static"

echo "" >> "$host_env_static"
echo "" >> "$host_env_static"

# Static Environment Configuration - Ruby Gem Path for Local User
echo "export RUBY_GEM_PATH=$(ruby -r rubygems -e 'puts Gem.user_dir')" >> "$host_env_static"

echo "" >> "$host_env_static"
echo "" >> "$host_env_static"

# Create SSH configuration directory
mkdir -p  "$HOME/.ssh" "$HOME/.ssh/config.d" "$HOME/.ssh/sockets"
chmod 700 "$HOME/.ssh" "$HOME/.ssh/config.d" "$HOME/.ssh/sockets"

# Upgrade antigen plugins if needed
echo "Upgrading Antigen plugins"
if [ -f "$HOME/.antigen/antigen.log" ]; then
  mv "$HOME/.antigen/antigen.log" "$HOME/.antigen/antigen.$(date +'%Y%m%d-%H%M%S').log"
fi
zsh -c 'source $HOME/.zshrc && antigen update'

# Re-Create zsh completion
echo "Recreating ZSH completion"
if [ -f "$HOME/.zcompdump" ]; then
  rm "$HOME/.zcompdump"
fi
zsh -c 'source $HOME/.zshrc && autoload -U compinit && compinit'

# Bootstrap vim
if command -v vim >/dev/null 2>&1; then
  # Download the latest vim-plug
  curl --fail --location --create-dirs --silent --output $HOME/.vim/autoload/plug.vim \
      https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

  # Install all plugins
  echo "Bootstraping Vim"
  vim '+PlugUpdate' '+PlugClean!' '+PlugUpdate' '+qall'
fi

# Bootstrap tmux
if command -v tmux >/dev/null 2>&1; then
  echo "Bootstrapping tmux"
  if [ ! -d "$HOME/.tmux/plugins/tpm" ]; then
    # installing tmux-plugin-manager and plugins
    mkdir "$HOME/.tmux/plugins"
    git clone https://github.com/tmux-plugins/tpm "$HOME/.tmux/plugins/tpm"
    "$HOME"/.tmux/plugins/tpm/bin/install_plugins
  else
    # updating tpm and plugins
    cd "$HOME/.tmux/plugins/tpm"
    git pull -p
    cd "$HOME"
    "$HOME"/.tmux/plugins/tpm/bin/update_plugins all
  fi
fi

# Bootstrap atom
if command -v apm >/dev/null 2>&1; then
  echo "Boorstrapping atom"
  if [ ! -d "$HOME/.atom/packages" ]; then
    # Install packages
    apm install --packages-file "$HOME/.atom-packages"
  else
    # Upgrade packages
    apm upgrade --no-confirm
  fi
fi

# Bootstrap Go
if [ ! -d "$HOME/go" ]; then
  mkdir $HOME/go
  mkdir -p $HOME/go/bin $HOME/go/pkg $HOME/go/src
fi

# Bootstrap Terraform
if [ ! -d "$HOME/.terraform.d" ]; then
  mkdir "$HOME/.terraform.d"
  chmod 755 "$HOME/.terraform.d"
fi
if [ ! -d "$HOME/.terraform.d/plugins" ]; then
  mkdir "$HOME/.terraform.d/plugins"
  chmod 755 "$HOME/.terraform.d/plugins"
fi
if [ ! -d "$HOME/.terraform.d/plugin-cache" ]; then
  mkdir "$HOME/.terraform.d/plugin-cache"
  chmod 755 "$HOME/.terraform.d/plugin-cache"
fi
